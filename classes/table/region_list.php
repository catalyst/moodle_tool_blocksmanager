<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Table to display a list of regions.
 *
 * @package     tool_blocksmanager
 * @copyright   2019 Catalyst IT
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace tool_blocksmanager\table;

use tool_blocksmanager\region;
use tool_blocksmanager\region_manager;

defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir.'/tablelib.php');

class region_list extends \flexible_table {

    /**
     * @var int Autogenerated id.
     */
    private static $autoid = 0;

    /**
     * Constructor
     *
     * @param string|null $id to be used by the table, autogenerated if null.
     */
    public function __construct($id = null) {
        global $PAGE;

        $id = (is_null($id) ? self::$autoid++ : $id);
        parent::__construct('tool_blocksmanager_region_'.$id);

        $this->define_baseurl($PAGE->url);
        $this->set_attribute('class', 'generaltable admintable');

        $columns = [
            'region',
            'categories',
            'config',
            'delete',
            'hide',
            'add',
            'move',
            'actions'
        ];

        $this->define_columns($columns);

        $headers = [];
        foreach ($columns as $column) {
            $headers[] = get_string('col_' . $column, 'tool_blocksmanager');
        }

        $this->define_headers($headers);

        $this->setup();
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_region(region $record) {
        return $this->get_display_value($record, 'region');
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_categories(region $record) {
        return $this->get_display_value($record, 'categories');
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_config(region $record) {
        return $this->get_display_value($record, 'config');
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_delete(region $record) {
        return $this->get_display_value($record, 'delete');
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_hide(region $record) {
        return $this->get_display_value($record, 'hide');
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_add(region $record) {
        return $this->get_display_value($record, 'add');
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_move(region $record) {
        return $this->get_display_value($record, 'move');
    }

    /**
     * Get value to display.
     *
     * @param \tool_blocksmanager\region $record Region record
     * @param string $col Col name.
     *
     * @return mixed|string
     * @throws \coding_exception
     */
    protected function get_display_value(region $record, $col) {
        $value = $record->get($col);

        switch ($col) {
            case 'categories':
                $catids = explode(',', $value);
                $categories = [];
                foreach (\core_course_category::get_many($catids) as $category) {
                    if (!empty($category->name)) {
                        $categories[] = $category->name;
                    }
                }

                $display = implode('<BR />', $categories);

                break;

            case 'config':
            case 'delete':
            case 'hide':
            case 'add':
            case 'move':
                $display = empty($value) ? get_string('no') : get_string('yes');
                break;

            default:
                $display = $value;
        }

        return $display;
    }

    /**
     * Display column.
     *
     * @param \tool_blocksmanager\region $record
     * @return string
     */
    public function col_actions(region $record) {
        $buttons = [];

        $buttons[] = self::format_icon_link(
            new \moodle_url(region_manager::get_base_url(), [
                'action' => region_manager::ACTION_EDIT,
                'id' => $record->get('id'),
            ]),
            't/edit',
            get_string('edit')
        );

        $buttons[] = self::format_icon_link(
            new \moodle_url(region_manager::get_base_url(), [
                'id' => $record->get('id'),
                'sesskey' => sesskey(),
                'action' => region_manager::ACTION_DELETE,
            ]),
            't/delete' ,
            get_string('delete')
        );

        return \html_writer::tag('nobr', implode('&nbsp;', $buttons));
    }

    /**
     * Format icon link.
     *
     * @param string $url The URL for the icon.
     * @param string $icon The icon identifier.
     * @param string $alt The alt text for the icon.
     * @param string $iconcomponent The icon component.
     * @param array $options Display options.
     *
     * @return  string
     */
    public static function format_icon_link($url, $icon, $alt, $iconcomponent = 'moodle', $options = array()) {
        global $OUTPUT;

        return $OUTPUT->action_icon(
            $url,
            new \pix_icon($icon, $alt, $iconcomponent, ['title' => $alt]),
            null,
            $options
        );
    }

    /**
     * Sets the data of the table.
     *
     * @param region[] $records  An array with records.
     */
    public function display(array $records) {
        foreach ($records as $record) {
            $this->add_data_keyed($this->format_row($record));
        }

        $this->finish_output();
    }

    /**
     * @inheritdoc
     */
    public function print_nothing_to_display() {
        echo \html_writer::div(get_string('no_regions', 'tool_blocksmanager'));
    }

}